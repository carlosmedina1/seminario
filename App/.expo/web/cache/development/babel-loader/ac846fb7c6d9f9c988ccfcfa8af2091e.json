{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport * as Animatable from 'react-native-animatable';\nimport MaterialCommunityIcons from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport MaterialIcons from \"@expo/vector-icons/MaterialIcons\";\nimport ruta from \"../hooks/routes\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as SQLite from 'expo-sqlite';\nimport Modal from \"../components/customModal\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  header: {\n    flex: 1,\n    width: '100%'\n  },\n  searchBar: {\n    width: '80%',\n    height: '30%',\n    borderBottomWidth: 1,\n    borderBottomColor: '#fff',\n    flexDirection: 'row'\n  },\n  body: {\n    flex: 10\n  },\n  footer: {\n    flex: 1\n  }\n});\nvar bd = SQLite.openDatabase('localhost.db', '1.0');\nexport default function faenas(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      retry = _useState4[0],\n      setRetry = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mensaje = _useState6[0],\n      setMensaje = _useState6[1];\n\n  var createTables = function createTables() {\n    bd.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS usuario (id_usuario INTEGER PRIMARY KEY AUTOINCREMENT, nombre_usuario VARCHAR(100), clave VARCHAR(100), id_trabajador INTEGER);', [], function (tx, res) {\n        console.log('tabla usuario creada');\n      }, function (tx, error) {\n        setRetry(true);\n        setLoading(false);\n        setMensaje('Error al guardar los datos del Usuario');\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS trabajador (id_trabajador INTEGER, id_tipo_trabajador INTEGER, rut_trabajador INTEGER, dv_trabajador VARCHAR(100), nombre_trabajador VARCHAR(100), direccion_trabajador VARCHAR(100), id_comuna INTEGER, fono_trabajador VARCHAR(100), mail_trabajador VARCHAR(100));', [], function (tx, res) {\n        console.log('tabla trabajador creada');\n      }, function (tx, error) {\n        setRetry(true);\n        setLoading(false);\n        setMensaje('Error al guardar los datos de los Trabajadores');\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS faena (id_faena INTEGER, nombre_faena VARCHAR(100), id_trabajador INTEGER, id_comuna INTEGER, vigente BOOLEAN);', [], function (tx, res) {\n        console.log('tabla faena creada');\n      }, function (tx, error) {\n        setRetry(true);\n        setLoading(false);\n        setMensaje('Error al guardar las Faenas');\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS comuna (id_comuna INTEGER, nombre_comuna VARCHAR(100));', [], function (tx, res) {\n        console.log('tabla comuna creada');\n      }, function (tx, error) {\n        setRetry(true);\n        setLoading(false);\n        setMensaje('Error al guardar las Comunas');\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS vehiculo(id_vehiculo INTEGER, patente VARCHAR(100), id_tipo_vehiculo INTEGER, id_estado_vehiculo INTEGER, id_trabajador INTEGER, id_proveedor INTEGER, modelo VARCHAR(200), anio VARCHAR(100), vim VARCHAR(100), numero_motor VARCHAR(200), observaciones VARCHAR(2000), marca VARCHAR(100), vigente BOOLEAN, horometro INTEGER DEFAULT 0);', [], function (tx, res) {\n        console.log('tabla vehiculo creada');\n      }, function (tx, error) {\n        setRetry(true);\n        setLoading(false);\n        setMensaje('Error al guardar los Vehiculos');\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS faena_vehiculo(id_faena_vehiculo INTEGER, id_vehiculo INTEGER, id_faena INTEGER, fecha_inicio DATE, fecha_termino DATE, motivo_termino VARCHAR(100), vigente BOOLEAN, id_trabajador INTEGER, observaciones VARCHAR(2000));', [], function (tx, res) {\n        console.log('tabla faena_vehiculo creada');\n      }, function (tx, error) {\n        setRetry(true);\n        setLoading(false);\n        setMensaje('Error al guardar los datos Faena-Vehiculo');\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS tipo_trabajador(id_tipo_trabajador INTEGER, nombre_tipo_trabajador VARCHAR(100));', [], function (tx, res) {\n        console.log('tabla tipo_trabajador creada');\n      }, function (tx, error) {\n        setRetry(true);\n        setLoading(false);\n        setMensaje('Error al guardar los Tipos de Trabajadores');\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS tipo_vehiculo(id_tipo_vehiculo INTEGER, nombre_tipo_vehiculo VARCHAR(100));', [], function (tx, res) {\n        console.log('tabla tipo_vehiculo creada');\n      }, function (tx, error) {\n        setRetry(true);\n        setLoading(false);\n        setMensaje('Error al guardar los Tipos de Vehiculos');\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS proveedor(id_proveedor INTEGER, rut_proveedor INTEGER, dv_proveedor VARCHAR(100), nombre_proveedor VARCHAR(200), giro_proveedor VARCHAR(200), direccion_proveedor VARCHAR(200), id_comuna INTEGER, fono_proveedor VARCHAR(200), mail_proveedor VARCHAR(200));', [], function (tx, res) {\n        console.log('tabla proveedor creada');\n      }, function (error) {\n        setRetry(true);\n        setLoading(false);\n        setMensaje('Error al guardar los Proveedores');\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS labor(id_labor INTEGER, nombre_labor VARCHAR(200));', [], function (tx, res) {\n        console.log('tabla labor creada');\n      }, function (error) {\n        setRetry(true);\n        setLoading(false);\n        setMensaje('Error al guardar los Proveedores');\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS report(id_report INTEGER PRIMARY KEY AUTOINCREMENT, id_faena_vehiculo INTEGER, folio_report INTEGER, id_report_sistema INTEGER);', [], function (tx, res) {\n        console.log('tabla report creada');\n      }, function (error) {\n        setRetry(true);\n        setLoading(false);\n        setMensaje('Error al guardar los report');\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS detalle_report(id_detalle_report INTEGER PRIMARY KEY AUTOINCREMENT, id_report INTEGER, id_report_apertura INTEGER, id_labor INTEGER, id_usuario INTEGER, fecha_hora_supervisor VARCHAR(200), fecha_hora VARCHAR(200), latitud VARCHAR(2000), longitud VARCHAR(2000), con_cierre BOOLEAN, id_motivo_detencion INTEGER, observaciones VARCHAR(2000), horometro VARCHAR(100));', [], function (tx, res) {\n        console.log('tabla detalle_report creada');\n      }, function (error) {\n        setRetry(true);\n        setLoading(false);\n        setMensaje('Error al guardar los detalle_report');\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS funcionamiento_vehiculo(id_funcionamiento_vehiculo INTEGER PRIMARY KEY AUTOINCREMENT, id_faena_vehiculo INTEGER, id_report INTEGER, funcionando BOOLEAN, id_apertura INTEGER DEFAULT 0, cerrada BOOLEAN DEFAULT 0);', [], function (tx, res) {\n        console.log('tabla funcionamiento_vehiculo creada');\n      }, function (error) {\n        setRetry(true);\n        setLoading(false);\n        setMensaje('Error al guardar los funcionamiento_vehiculo');\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS tipo_detencion(id_tipo_detencion INTEGER, nombre_tipo_detencion VARCHAR(100));', [], function (tx, res) {\n        console.log('tabla tipo_detencion creada');\n      }, function (error) {\n        setRetry(true);\n        setLoading(false);\n        setMensaje('Error al guardar losd datos de tipo_detencion');\n        console.error(error.message);\n      });\n    });\n  };\n\n  var selectComuna = function selectComuna(data) {\n    bd.transaction(function (tx) {\n      tx.executeSql('select * from comuna', [], function (tx, res) {\n        var localComunas = res.rows;\n\n        var _loop = function _loop(i) {\n          if (localComunas.length == 0) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into comuna(id_comuna, nombre_comuna) values(?,?)', [data[i].id_comuna, data[i].nombre_comuna], function (tr, res) {\n                console.log('comuna insertada: ' + data[i].nombre_comuna);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else if (localComunas._array[i].id_comuna != data[i].id_comuna) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into comuna(nombre_comuna) values(?)', [data[i].nombre_comuna], function (tr, res) {\n                console.log('comuna insertada: ' + data[i].nombre_comuna);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else {\n            null;\n          }\n        };\n\n        for (var i = 0; i < data.length; i++) {\n          _loop(i);\n        }\n      }, function (error) {\n        console.error(error.message);\n      });\n    });\n  };\n\n  var selectUsuario = function selectUsuario(data) {\n    bd.transaction(function (tx) {\n      tx.executeSql('select * from usuario', [], function (tx, res) {\n        var localUsuario = res.rows;\n\n        var _loop2 = function _loop2(i) {\n          if (localUsuario.length == 0) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into usuario(nombre_usuario, clave, id_trabajador) values(?, ?, ?)', [data[i].nombre_usuario, data[i].clave, data[i].id_trabajador], function (tr, res) {\n                console.log('usuario insertado: ' + data[i].nombre_usuario);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else if (localUsuario._array[i].id_usuario != data[i].id_usuario) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into usuario(nombre_usuario, clave, id_trabajador) values(?, ?, ?)', [data[i].nombre_usuario, data[i].clave, data[i].id_trabajador], function (tr, res) {\n                console.log('usuario insertado: ' + data[i].nombre_usuario);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else {\n            null;\n          }\n        };\n\n        for (var i = 0; i < data.length; i++) {\n          _loop2(i);\n        }\n      }, function (tx, e) {\n        console.log(e);\n      });\n    });\n  };\n\n  var selectFaena = function selectFaena(data) {\n    bd.transaction(function (tx) {\n      tx.executeSql('select * from faena', [], function (tx, res) {\n        var localFaena = res.rows;\n\n        var _loop3 = function _loop3(i) {\n          if (localFaena.length == 0) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into faena(id_faena, nombre_faena, id_trabajador, id_comuna, vigente) values(?,?,?,?,?)', [data[i].id_faena, data[i].nombre_faena, data[i].id_trabajador, data[i].id_comuna, data[i].vigente], function (tr, res) {\n                console.log('faena insertada: ' + data[i].nombre_faena);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else if (localFaena._array[i].id_faena != data[i].id_faena) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into faena(nombre_faena, id_trabajador, id_comuna, vigente) values(?,?,?,?)', [data[i].nombre_faena, data[i].id_trabajador, data[i].id_comuna, data[i].vigente], function (tr, res) {\n                console.log('faena insertada: ' + data[i].nombre_faena);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else {\n            null;\n          }\n        };\n\n        for (var i = 0; i < data.length; i++) {\n          _loop3(i);\n        }\n      }, function (tx, e) {\n        console.log(e);\n      });\n    });\n  };\n\n  var selectVehiculoFaena = function selectVehiculoFaena(data) {\n    bd.transaction(function (tx) {\n      tx.executeSql('select * from faena_vehiculo', [], function (tx, res) {\n        var localFaena = res.rows;\n\n        var _loop4 = function _loop4(i) {\n          if (localFaena.length == 0) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into faena_vehiculo(id_faena_vehiculo, id_vehiculo, id_faena, fecha_inicio, fecha_termino, motivo_termino, vigente, id_trabajador, observaciones) values(?, ?, ?, ?, ?, ?, ?, ?, ?)', [data[i].id_faena_vehiculo, data[i].id_vehiculo, data[i].id_faena, data[i].fecha_inicio, data[i].fecha_termino, data[i].motivo_termino, data[i].vigente, data[i].id_trabajador, data[i].observaciones], function (tr, res) {\n                console.log('faena-vehiculo insertado: ' + data[i].fecha_inicio);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else if (localFaena._array[i].id_faena != data[i].id_faena) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into faena_vehiculo(id_faena_vehiculo, id_vehiculo, id_faena, fecha_inicio, fecha_termino, motivo_termino, vigente, id_trabajador, observaciones) values(?, ?, ?, ?, ?, ?, ?, ?, ?)', [data[i].id_faena_vehiculo, data[i].id_vehiculo, data[i].id_faena, data[i].fecha_inicio, data[i].fecha_termino, data[i].motivo_termino, data[i].vigente, data[i].id_trabajador, data[i].observaciones], function (tr, res) {\n                console.log('faena-vehiculo insertado: ' + data[i].fecha_inicio);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else {\n            null;\n          }\n        };\n\n        for (var i = 0; i < data.length; i++) {\n          _loop4(i);\n        }\n      }, function (error) {\n        console.error(error.message);\n      });\n    });\n  };\n\n  var selectVehiculo = function selectVehiculo(data) {\n    bd.transaction(function (tx) {\n      tx.executeSql('select * from vehiculo', [], function (tx, res) {\n        var localComunas = res.rows;\n\n        var _loop5 = function _loop5(i) {\n          if (localComunas.length == 0) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into vehiculo(id_vehiculo, patente, id_tipo_vehiculo, id_estado_vehiculo, id_trabajador, id_proveedor, modelo, anio, vim, numero_motor, observaciones, marca, vigente) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [data[i].id_vehiculo, data[i].patente, data[i].id_tipo_vehiculo, data[i].id_estado_vehiculo, data[i].id_trabajador, data[i].id_proveedor, data[i].modelo, data[i].anio, data[i].vim, data[i].numero_motor, data[i].observaciones, data[i].marca, data[i].vigente], function (tr, res) {\n                console.log('vehiculo insertado: ' + data[i].patente);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else if (localComunas._array[i].id_comuna != data[i].id_comuna) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into vehiculo(id_vehiculo, patente, id_tipo_vehiculo, id_estado_vehiculo, id_trabajador, id_proveedor, modelo, anio, vim, numero_motor, observaciones, marca, vigente) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [data[i].id_vehiculo, data[i].patente, data[i].id_tipo_vehiculo, data[i].id_estado_vehiculo, data[i].id_trabajador, data[i].id_proveedor, data[i].modelo, data[i].anio, data[i].vim, data[i].numero_motor, data[i].observaciones, data[i].marca, data[i].vigente], function (tr, res) {\n                console.log('vehiculo insertado: ' + data[i].patente);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else {\n            null;\n          }\n        };\n\n        for (var i = 0; i < data.length; i++) {\n          _loop5(i);\n        }\n      }, function (error) {\n        console.error(error.message);\n      });\n    });\n  };\n\n  var selectTrabajador = function selectTrabajador(data) {\n    bd.transaction(function (tx) {\n      tx.executeSql('select * from trabajador', [], function (tx, res) {\n        var localTrabajador = res.rows;\n\n        var _loop6 = function _loop6(i) {\n          if (localTrabajador.length == 0) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into trabajador(id_trabajador, id_tipo_trabajador, rut_trabajador, dv_trabajador, nombre_trabajador, direccion_trabajador, id_comuna, fono_trabajador, mail_trabajador) values(?, ?, ?, ?, ?, ?, ?, ?, ?)', [data[i].id_trabajador, data[i].id_tipo_trabajador, data[i].rut_trabajador, data[i].dv_trabajador, data[i].nombre_trabajador, data[i].direccion_trabajador, data[i].id_comuna, data[i].fono_trabajador, data[i].mail_trabajador], function (tr, res) {\n                console.log('trabajador insertado: ' + data[i].rut_trabajador);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else if (localTrabajador._array[i].id_comuna != data[i].id_comuna) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into vehiculo(id_vehiculo, patente, id_tipo_vehiculo, id_estado_vehiculo, id_trabajador, id_proveedor, modelo, anio, vim, numero_motor, observaciones, marca, vigente) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [data[i].id_vehiculo, data[i].patente, data[i].id_tipo_vehiculo, data[i].id_estado_vehiculo, data[i].id_trabajador, data[i].id_proveedor, data[i].modelo, data[i].anio, data[i].vim, data[i].numero_motor, data[i].observaciones, data[i].marca, data[i].vigente], function (tr, res) {\n                console.log('vehiculo insertado: ' + data[i].patente);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else {\n            null;\n          }\n        };\n\n        for (var i = 0; i < data.length; i++) {\n          _loop6(i);\n        }\n      }, function (error) {\n        console.error(error.message);\n      });\n    });\n  };\n\n  var selectTipoTrabajador = function selectTipoTrabajador(data) {\n    bd.transaction(function (tx) {\n      tx.executeSql('select * from tipo_trabajador', [], function (tx, res) {\n        var localTipoTrabajador = res.rows;\n\n        var _loop7 = function _loop7(i) {\n          if (localTipoTrabajador.length == 0) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into tipo_trabajador(id_tipo_trabajador, nombre_tipo_trabajador ) values(?,?)', [data[i].id_tipo_trabajador, data[i].nombre_tipo_trabajador], function (tr, res) {\n                console.log('tipo trabajador insertado: ' + data[i].nombre_tipo_trabajador);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else if (localTipoTrabajador._array[i].id_comuna != data[i].id_comuna) {\n            bd.transaction(function (tr) {\n              bd.transaction(function (tr) {\n                tr.executeSql('insert into tipo_trabajador(id_tipo_trabajador, nombre_tipo_trabajador ) values(?,?)', [data[i].id_tipo_trabajador, data[i].nombre_tipo_trabajador], function (tr, res) {\n                  console.log('tipo trabajador insertado: ' + data[i].nombre_tipo_trabajador);\n                }, function (tr, e) {\n                  console.error(e);\n                });\n              });\n            });\n          } else {\n            null;\n          }\n        };\n\n        for (var i = 0; i < data.length; i++) {\n          _loop7(i);\n        }\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n  };\n\n  var selectTipoVehiculo = function selectTipoVehiculo(data) {\n    bd.transaction(function (tx) {\n      tx.executeSql('select * from tipo_vehiculo', [], function (tx, res) {\n        var localTipoVehiculo = res.rows;\n\n        var _loop8 = function _loop8(i) {\n          if (localTipoVehiculo.length == 0) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into tipo_vehiculo(id_tipo_vehiculo, nombre_tipo_vehiculo ) values(?,?)', [data[i].id_tipo_vehiculo, data[i].nombre_tipo_vehiculo], function (tr, res) {\n                console.log('tipo vehiculo insertado: ' + data[i].nombre_tipo_trabajador);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else if (localTipoVehiculo._array[i].id_comuna != data[i].id_comuna) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into tipo_trabajador(id_tipo_trabajador, nombre_tipo_trabajador ) values(?,?)', [data[i].id_tipo_trabajador, data[i].nombre_tipo_trabajador], function (tr, res) {\n                console.log('tipo trabajador insertado: ' + data[i].nombre_tipo_trabajador);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else {\n            null;\n          }\n        };\n\n        for (var i = 0; i < data.length; i++) {\n          _loop8(i);\n        }\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n  };\n\n  var selectProveedor = function selectProveedor(data) {\n    bd.transaction(function (tx) {\n      tx.executeSql('select * from proveedor', [], function (tx, res) {\n        var localProveedor = res.rows;\n\n        var _loop9 = function _loop9(i) {\n          if (localProveedor.length == 0) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into proveedor(id_proveedor, rut_proveedor, dv_proveedor, nombre_proveedor, giro_proveedor, direccion_proveedor, id_comuna, fono_proveedor, mail_proveedor) values(?, ?, ?, ?, ?, ?, ?, ?, ?)', [data[i].id_proveedor, data[i].rut_proveedor, data[i].dv_proveedor, data[i].nombre_proveedor, data[i].giro_proveedor, data[i].direccion_proveedor, data[i].id_comuna, data[i].fono_proveedor, data[i].mail_proveedor], function (tr, res) {\n                console.log('proveedor insertado: ' + data[i].nombre_proveedor);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else if (localProveedor._array[i].id_proveedor != data[i].id_proveedor) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into proveedor(id_proveedor, rut_proveedor, dv_proveedor, nombre_proveedor, giro_proveedor, direccion_proveedor, id_comuna, fono_proveedor, mail_proveedor) values(?, ?, ?, ?, ?, ?, ?, ?, ?)', [data[i].id_proveedor, data[i].rut_proveedor, data[i].dv_proveedor, data[i].nombre_proveedor, data[i].giro_proveedor, data[i].direccion_proveedor, data[i].id_comuna, data[i].fono_proveedor, data[i].mail_proveedor], function (tr, res) {\n                console.log('proveedor insertado: ' + data[i].nombre_proveedor);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else {\n            null;\n          }\n        };\n\n        for (var i = 0; i < data.length; i++) {\n          _loop9(i);\n        }\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n  };\n\n  var selectLabor = function selectLabor(data) {\n    bd.transaction(function (tx) {\n      tx.executeSql('select * from labor', [], function (tx, res) {\n        var localLabor = res.rows;\n\n        var _loop10 = function _loop10(i) {\n          if (localLabor.length == 0) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into labor(id_labor, nombre_labor) values(?,?)', [data[i].id_labor, data[i].nombre_labor], function (tr, res) {\n                console.log('labor insertada: ' + data[i].nombre_labor);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else if (localLabor._array[i].id_proveedor != data[i].id_proveedor) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into labor(id_labor, nombre_labor) values(?,?)', [data[i].id_labor, data[i].nombre_labor], function (tr, res) {\n                console.log('labor insertada: ' + data[i].nombre_labor);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else {\n            null;\n          }\n        };\n\n        for (var i = 0; i < data.length; i++) {\n          _loop10(i);\n        }\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n  };\n\n  var selectTipoDetencion = function selectTipoDetencion(data) {\n    bd.transaction(function (tx) {\n      tx.executeSql('select * from tipo_detencion', [], function (tx, res) {\n        var localDetencion = res.rows;\n\n        var _loop11 = function _loop11(i) {\n          if (localDetencion.length == 0) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into tipo_detencion(id_tipo_detencion, nombre_tipo_detencion) values(?,?)', [data[i].id_tipo_detencion, data[i].nombre_tipo_detencion], function (tr, res) {\n                console.log('tipo detencion insertada: ' + data[i].nombre_tipo_detencion);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else if (localDetencion._array[i].id_tipo_detencion != data[i].id_tipo_detencion) {\n            bd.transaction(function (tr) {\n              tr.executeSql('insert into tipo_detencion(id_tipo_detencion, nombre_tipo_detencion) values(?,?)', [data[i].id_tipo_detencion, data[i].nombre_tipo_detencion], function (tr, res) {\n                console.log('tipo detencion insertada: ' + data[i].nombre_tipo_detencion);\n              }, function (tr, e) {\n                console.error(e);\n              });\n            });\n          } else {\n            null;\n          }\n        };\n\n        for (var i = 0; i < data.length; i++) {\n          _loop11(i);\n        }\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n  };\n\n  var getUsuario = function getUsuario() {\n    var response, data;\n    return _regeneratorRuntime.async(function getUsuario$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setMensaje('');\n            setRetry(false);\n            setLoading(true);\n            _context.prev = 3;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(fetch(ruta + 'sync/usuario', {\n              method: 'POST'\n            }));\n\n          case 6:\n            response = _context.sent;\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 9:\n            data = _context.sent;\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(data.length);\n\n          case 12:\n            _context.t0 = _context.sent;\n\n            if (!(_context.t0 != 0)) {\n              _context.next = 15;\n              break;\n            }\n\n            selectUsuario(data);\n\n          case 15:\n            getFaenas();\n            _context.next = 24;\n            break;\n\n          case 18:\n            _context.prev = 18;\n            _context.t1 = _context[\"catch\"](3);\n            setLoading(false);\n            setRetry(true);\n            setMensaje('Error al Conectar con el Servidor');\n            console.error(_context.t1);\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 18]], Promise);\n  };\n\n  var getFaenas = function getFaenas() {\n    var response, data;\n    return _regeneratorRuntime.async(function getFaenas$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(fetch(ruta + 'sync/faena', {\n              method: 'POST'\n            }));\n\n          case 3:\n            response = _context2.sent;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            data = _context2.sent;\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(data.length);\n\n          case 9:\n            _context2.t0 = _context2.sent;\n\n            if (!(_context2.t0 != 0)) {\n              _context2.next = 12;\n              break;\n            }\n\n            selectFaena(data);\n\n          case 12:\n            getComunas();\n            _context2.next = 21;\n            break;\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t1 = _context2[\"catch\"](0);\n            setLoading(false);\n            setRetry(true);\n            setMensaje('Error al Conectar con el Servidor');\n            console.error(_context2.t1);\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n\n  var getComunas = function getComunas() {\n    var response, data;\n    return _regeneratorRuntime.async(function getComunas$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(fetch(ruta + 'sync/comuna', {\n              method: 'POST'\n            }));\n\n          case 3:\n            response = _context3.sent;\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            data = _context3.sent;\n            _context3.next = 9;\n            return _regeneratorRuntime.awrap(data.length);\n\n          case 9:\n            _context3.t0 = _context3.sent;\n\n            if (!(_context3.t0 != 0)) {\n              _context3.next = 12;\n              break;\n            }\n\n            selectComuna(data);\n\n          case 12:\n            getVehiculo();\n            _context3.next = 21;\n            break;\n\n          case 15:\n            _context3.prev = 15;\n            _context3.t1 = _context3[\"catch\"](0);\n            setLoading(false);\n            setRetry(true);\n            setMensaje('Error al Conectar con el Servidor');\n            console.error(_context3.t1);\n\n          case 21:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n\n  var getVehiculo = function getVehiculo() {\n    var response, data;\n    return _regeneratorRuntime.async(function getVehiculo$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(fetch(ruta + 'sync/vehiculo', {\n              method: 'POST'\n            }));\n\n          case 3:\n            response = _context4.sent;\n            _context4.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            data = _context4.sent;\n            _context4.next = 9;\n            return _regeneratorRuntime.awrap(data.length);\n\n          case 9:\n            _context4.t0 = _context4.sent;\n\n            if (!(_context4.t0 != 0)) {\n              _context4.next = 12;\n              break;\n            }\n\n            selectVehiculo(data);\n\n          case 12:\n            getVehiculoFaena();\n            _context4.next = 21;\n            break;\n\n          case 15:\n            _context4.prev = 15;\n            _context4.t1 = _context4[\"catch\"](0);\n            setLoading(false);\n            setRetry(true);\n            setMensaje('Error al Conectar con el Servidor');\n            console.error('get Vehiculos: ' + _context4.t1);\n\n          case 21:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n\n  var getVehiculoFaena = function getVehiculoFaena() {\n    var response, data;\n    return _regeneratorRuntime.async(function getVehiculoFaena$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            _context5.next = 3;\n            return _regeneratorRuntime.awrap(fetch(ruta + 'sync/vehiculo-faena', {\n              method: 'POST'\n            }));\n\n          case 3:\n            response = _context5.sent;\n            _context5.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            data = _context5.sent;\n            _context5.next = 9;\n            return _regeneratorRuntime.awrap(data.length);\n\n          case 9:\n            _context5.t0 = _context5.sent;\n\n            if (!(_context5.t0 != 0)) {\n              _context5.next = 12;\n              break;\n            }\n\n            selectVehiculoFaena(data);\n\n          case 12:\n            getTrabajador();\n            _context5.next = 21;\n            break;\n\n          case 15:\n            _context5.prev = 15;\n            _context5.t1 = _context5[\"catch\"](0);\n            setLoading(false);\n            setRetry(true);\n            setMensaje('Error al Conectar con el Servidor');\n            console.error('get vehiculos faena :' + _context5.t1);\n\n          case 21:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n\n  var getTrabajador = function getTrabajador() {\n    var response, data;\n    return _regeneratorRuntime.async(function getTrabajador$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _context6.next = 3;\n            return _regeneratorRuntime.awrap(fetch(ruta + 'sync/trabajador', {\n              method: 'POST'\n            }));\n\n          case 3:\n            response = _context6.sent;\n            _context6.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            data = _context6.sent;\n            _context6.next = 9;\n            return _regeneratorRuntime.awrap(data.length);\n\n          case 9:\n            _context6.t0 = _context6.sent;\n\n            if (!(_context6.t0 != 0)) {\n              _context6.next = 12;\n              break;\n            }\n\n            selectTrabajador(data);\n\n          case 12:\n            getTipoTrabajador();\n            _context6.next = 21;\n            break;\n\n          case 15:\n            _context6.prev = 15;\n            _context6.t1 = _context6[\"catch\"](0);\n            setLoading(false);\n            setRetry(true);\n            setMensaje('Error al Conectar con el Servidor');\n            console.error('get trabajador :' + _context6.t1);\n\n          case 21:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n\n  var getTipoTrabajador = function getTipoTrabajador() {\n    var response, data;\n    return _regeneratorRuntime.async(function getTipoTrabajador$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _context7.next = 3;\n            return _regeneratorRuntime.awrap(fetch(ruta + 'sync/tipo-trabajador', {\n              method: 'POST'\n            }));\n\n          case 3:\n            response = _context7.sent;\n            _context7.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            data = _context7.sent;\n            _context7.next = 9;\n            return _regeneratorRuntime.awrap(data.length);\n\n          case 9:\n            _context7.t0 = _context7.sent;\n\n            if (!(_context7.t0 != 0)) {\n              _context7.next = 12;\n              break;\n            }\n\n            selectTipoTrabajador(data);\n\n          case 12:\n            getTipoVehiculo();\n            _context7.next = 21;\n            break;\n\n          case 15:\n            _context7.prev = 15;\n            _context7.t1 = _context7[\"catch\"](0);\n            setLoading(false);\n            setRetry(true);\n            setMensaje('Error al Conectar con el Servidor');\n            console.error('get tipo trabajador :' + _context7.t1);\n\n          case 21:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n\n  var getTipoVehiculo = function getTipoVehiculo() {\n    var response, data;\n    return _regeneratorRuntime.async(function getTipoVehiculo$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            _context8.next = 3;\n            return _regeneratorRuntime.awrap(fetch(ruta + 'sync/tipo-vehiculo', {\n              method: 'POST'\n            }));\n\n          case 3:\n            response = _context8.sent;\n            _context8.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            data = _context8.sent;\n            _context8.next = 9;\n            return _regeneratorRuntime.awrap(data.length);\n\n          case 9:\n            _context8.t0 = _context8.sent;\n\n            if (!(_context8.t0 != 0)) {\n              _context8.next = 12;\n              break;\n            }\n\n            selectTipoVehiculo(data);\n\n          case 12:\n            getProveedor();\n            _context8.next = 21;\n            break;\n\n          case 15:\n            _context8.prev = 15;\n            _context8.t1 = _context8[\"catch\"](0);\n            setLoading(false);\n            setRetry(true);\n            setMensaje('Error al Conectar con el Servidor');\n            console.error('get tipo trabajador :' + _context8.t1);\n\n          case 21:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n\n  var getProveedor = function getProveedor() {\n    var response, data;\n    return _regeneratorRuntime.async(function getProveedor$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.prev = 0;\n            _context9.next = 3;\n            return _regeneratorRuntime.awrap(fetch(ruta + 'sync/proveedor', {\n              method: 'POST'\n            }));\n\n          case 3:\n            response = _context9.sent;\n            _context9.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            data = _context9.sent;\n            _context9.next = 9;\n            return _regeneratorRuntime.awrap(data.length);\n\n          case 9:\n            _context9.t0 = _context9.sent;\n\n            if (!(_context9.t0 != 0)) {\n              _context9.next = 12;\n              break;\n            }\n\n            selectProveedor(data);\n\n          case 12:\n            getLabor();\n            _context9.next = 21;\n            break;\n\n          case 15:\n            _context9.prev = 15;\n            _context9.t1 = _context9[\"catch\"](0);\n            setLoading(false);\n            setRetry(true);\n            setMensaje('Error al Conectar con el Servidor');\n            console.error('get proveedor :' + _context9.t1);\n\n          case 21:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n\n  var getLabor = function getLabor() {\n    var response, data;\n    return _regeneratorRuntime.async(function getLabor$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.prev = 0;\n            _context10.next = 3;\n            return _regeneratorRuntime.awrap(fetch(ruta + 'sync/labor', {\n              method: 'POST'\n            }));\n\n          case 3:\n            response = _context10.sent;\n            _context10.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            data = _context10.sent;\n            _context10.next = 9;\n            return _regeneratorRuntime.awrap(data.length);\n\n          case 9:\n            _context10.t0 = _context10.sent;\n\n            if (!(_context10.t0 != 0)) {\n              _context10.next = 12;\n              break;\n            }\n\n            selectLabor(data);\n\n          case 12:\n            setTimeout(function () {\n              setLoading(false);\n              navigation.navigate('Faenas');\n            }, 3000);\n            _context10.next = 21;\n            break;\n\n          case 15:\n            _context10.prev = 15;\n            _context10.t1 = _context10[\"catch\"](0);\n            setLoading(false);\n            setRetry(true);\n            setMensaje('Error al Conectar con el Servidor');\n            console.error('get labor :' + _context10.t1);\n\n          case 21:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  };\n\n  var deleteTablas = function deleteTablas() {\n    bd.transaction(function (tx) {\n      tx.executeSql('drop table comuna;', [], function (tx, res) {\n        console.log('reiniciando tabla comuna');\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('drop table usuario;', [], function (tx, res) {\n        console.log('reiniciando tabla usuario');\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('drop table faena;', [], function (tx, res) {\n        console.log('reiniciando tabla faena');\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('drop table trabajador;', [], function (tx, res) {\n        console.log('reiniciando tabla trabajador');\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('drop table tipo_trabajador;', [], function (tx, res) {\n        console.log('reiniciando tabla tipo_trabajador');\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('drop table vehiculo;', [], function (tx, res) {\n        console.log('reiniciando tabla vehiculo');\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('drop table faena_vehiculo;', [], function (tx, res) {\n        console.log('reiniciando tabla faena_vehiculo');\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('drop table tipo_vehiculo;', [], function (tx, res) {\n        console.log('reiniciando tabla tipo_vehiculo');\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('drop table proveedor;', [], function (tx, res) {\n        console.log('reiniciando tabla proveedor');\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('drop table detalle_report;', [], function (tx, res) {\n        console.log('reiniciando tabla detalle report');\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('drop table report;', [], function (tx, res) {\n        console.log('reiniciando tabla report');\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('drop table funcionamiento_vehiculo;', [], function (tx, res) {\n        console.log('reiniciando estado');\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n    bd.transaction(function (tx) {\n      tx.executeSql('drop table labor;', [], function (tx, res) {\n        console.log('reiniciando labor');\n      }, function (tx, error) {\n        console.error(error.message);\n      });\n    });\n  };\n\n  var cerrarSesion = function cerrarSesion() {\n    return _regeneratorRuntime.async(function cerrarSesion$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            _context11.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.removeItem('user'));\n\n          case 2:\n            _context11.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.removeItem('isLoged'));\n\n          case 4:\n            navigation.replace('Login');\n\n          case 5:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var sincronizar = function sincronizar() {\n    setLoading(true);\n    deleteTablas();\n    createTables();\n    getUsuario();\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(StatusBar, {\n      barStyle: \"dark-content\",\n      translucent: true,\n      backgroundColor: \"transparent\"\n    }), _jsx(View, {\n      style: {\n        flex: 1\n      }\n    }), _jsxs(Animatable.View, {\n      animation: 'fadeInUpBig',\n      style: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        flex: 8\n      },\n      children: [_jsx(Text, {\n        style: {\n          fontSize: 28,\n          fontWeight: 'bold'\n        },\n        children: \"miSupervisor\"\n      }), loading ? _jsx(Animatable.View, {\n        animation: \"tada\",\n        easing: \"ease-out\",\n        iterationCount: \"infinite\",\n        children: _jsx(MaterialCommunityIcons, {\n          name: \"dump-truck\",\n          size: 40,\n          color: \"#000\"\n        })\n      }) : retry ? _jsx(View, {\n        children: _jsx(Text, {\n          style: {\n            color: 'gray',\n            fontWeight: 'bold',\n            fontSize: 15,\n            marginBottom: 10,\n            marginTop: 5\n          },\n          children: mensaje\n        })\n      }) : _jsx(Animatable.View, {\n        animation: \"pulse\",\n        easing: \"ease-out\",\n        iterationCount: \"infinite\",\n        style: {\n          margin: 20\n        },\n        children: _jsxs(TouchableOpacity, {\n          style: {\n            flexDirection: 'row',\n            backgroundColor: '#000',\n            alignItems: 'center',\n            justifyContent: 'center',\n            width: 200,\n            height: 50,\n            borderRadius: 10\n          },\n          onPress: function onPress() {\n            return sincronizar();\n          },\n          children: [_jsx(MaterialIcons, {\n            name: \"cloud-download\",\n            color: \"#fff\",\n            size: 20\n          }), _jsx(Text, {\n            style: {\n              color: '#fff',\n              fontWeight: 'bold',\n              fontSize: 18,\n              marginLeft: 10\n            },\n            children: \"Sincronizar\"\n          })]\n        })\n      })]\n    }), _jsx(View, {\n      style: {\n        flex: 1\n      },\n      children: retry ? _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return getUsuario();\n        },\n        style: {\n          backgroundColor: '#000',\n          width: 100,\n          height: 30,\n          borderRadius: 10,\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: _jsx(Text, {\n          style: {\n            color: '#fff',\n            fontWeight: 'bold',\n            fontSize: 15\n          },\n          children: \"Reintentar\"\n        })\n      }) : loading ? _jsxs(View, {\n        children: [_jsx(ActivityIndicator, {\n          size: \"small\",\n          color: \"#000\"\n        }), _jsx(Text, {\n          style: {\n            color: 'gray',\n            fontWeight: 'bold',\n            fontSize: 15,\n            marginBottom: 10,\n            marginTop: 5\n          },\n          children: \"Importando Datos...\"\n        })]\n      }) : _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return cerrarSesion();\n        },\n        children: _jsx(Text, {\n          style: {\n            color: 'gray',\n            fontWeight: 'bold',\n            fontSize: 15,\n            marginBottom: 10,\n            marginTop: 5\n          },\n          children: \"Cerrar Sesi\\xF3n\"\n        })\n      })\n    })]\n  });\n}","map":{"version":3,"sources":["/Users/datamaule/workspace/miSupervisor/App/src/Sync.js"],"names":["React","useState","useEffect","useCallback","Animatable","MaterialCommunityIcons","MaterialIcons","ruta","AsyncStorage","SQLite","Modal","styles","StyleSheet","create","container","flex","alignItems","justifyContent","header","width","searchBar","height","borderBottomWidth","borderBottomColor","flexDirection","body","footer","bd","openDatabase","faenas","navigation","loading","setLoading","retry","setRetry","mensaje","setMensaje","createTables","transaction","tx","executeSql","res","console","log","error","message","selectComuna","data","localComunas","rows","i","length","tr","id_comuna","nombre_comuna","e","_array","selectUsuario","localUsuario","nombre_usuario","clave","id_trabajador","id_usuario","selectFaena","localFaena","id_faena","nombre_faena","vigente","selectVehiculoFaena","id_faena_vehiculo","id_vehiculo","fecha_inicio","fecha_termino","motivo_termino","observaciones","selectVehiculo","patente","id_tipo_vehiculo","id_estado_vehiculo","id_proveedor","modelo","anio","vim","numero_motor","marca","selectTrabajador","localTrabajador","id_tipo_trabajador","rut_trabajador","dv_trabajador","nombre_trabajador","direccion_trabajador","fono_trabajador","mail_trabajador","selectTipoTrabajador","localTipoTrabajador","nombre_tipo_trabajador","selectTipoVehiculo","localTipoVehiculo","nombre_tipo_vehiculo","selectProveedor","localProveedor","rut_proveedor","dv_proveedor","nombre_proveedor","giro_proveedor","direccion_proveedor","fono_proveedor","mail_proveedor","selectLabor","localLabor","id_labor","nombre_labor","selectTipoDetencion","localDetencion","id_tipo_detencion","nombre_tipo_detencion","getUsuario","fetch","method","response","json","getFaenas","getComunas","getVehiculo","getVehiculoFaena","getTrabajador","getTipoTrabajador","getTipoVehiculo","getProveedor","getLabor","setTimeout","navigate","deleteTablas","cerrarSesion","removeItem","replace","sincronizar","fontSize","fontWeight","color","marginBottom","marginTop","margin","backgroundColor","borderRadius","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { View, StyleSheet, Text, ActivityIndicator, Alert, StatusBar, TouchableOpacity, FlatList, TextInput } from 'react-native'\n\nimport * as Animatable from 'react-native-animatable'\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons'\nimport MaterialIcons from 'react-native-vector-icons/MaterialIcons'\n\nimport ruta from '../hooks/routes'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport * as SQLite from 'expo-sqlite'\n\nimport Modal from '../components/customModal'\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n\n    header: {\n        flex: 1,\n        width: '100%',\n    },\n\n    searchBar: {\n        width: '80%',\n        height: '30%',\n        borderBottomWidth: 1,\n        borderBottomColor: '#fff',\n        flexDirection: 'row',\n    },\n\n    body: {\n        flex: 10,\n    },\n\n    footer: {\n        flex: 1,\n    },\n})\n\nconst bd = SQLite.openDatabase('localhost.db', '1.0')\n\nexport default function faenas({ navigation }) {\n    const [loading, setLoading] = useState(false)\n    const [retry, setRetry] = useState(false)\n    const [mensaje, setMensaje] = useState('')\n\n    const createTables = () => {\n        bd.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS usuario (id_usuario INTEGER PRIMARY KEY AUTOINCREMENT, nombre_usuario VARCHAR(100), clave VARCHAR(100), id_trabajador INTEGER);', [],\n                (tx, res) => {\n                    console.log('tabla usuario creada')\n                },\n                (tx, error) => {\n                    setRetry(true)\n                    setLoading(false)\n                    setMensaje('Error al guardar los datos del Usuario')\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS trabajador (id_trabajador INTEGER, id_tipo_trabajador INTEGER, rut_trabajador INTEGER, dv_trabajador VARCHAR(100), nombre_trabajador VARCHAR(100), direccion_trabajador VARCHAR(100), id_comuna INTEGER, fono_trabajador VARCHAR(100), mail_trabajador VARCHAR(100));', [],\n                (tx, res) => {\n                    console.log('tabla trabajador creada')\n                },\n                (tx, error) => {\n                    setRetry(true)\n                    setLoading(false)\n                    setMensaje('Error al guardar los datos de los Trabajadores')\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS faena (id_faena INTEGER, nombre_faena VARCHAR(100), id_trabajador INTEGER, id_comuna INTEGER, vigente BOOLEAN);', [],\n                (tx, res) => {\n                    console.log('tabla faena creada')\n                },\n                (tx, error) => {\n                    setRetry(true)\n                    setLoading(false)\n                    setMensaje('Error al guardar las Faenas')\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS comuna (id_comuna INTEGER, nombre_comuna VARCHAR(100));', [],\n                (tx, res) => {\n                    console.log('tabla comuna creada')\n                },\n                (tx, error) => {\n                    setRetry(true)\n                    setLoading(false)\n                    setMensaje('Error al guardar las Comunas')\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS vehiculo(id_vehiculo INTEGER, patente VARCHAR(100), id_tipo_vehiculo INTEGER, id_estado_vehiculo INTEGER, id_trabajador INTEGER, id_proveedor INTEGER, modelo VARCHAR(200), anio VARCHAR(100), vim VARCHAR(100), numero_motor VARCHAR(200), observaciones VARCHAR(2000), marca VARCHAR(100), vigente BOOLEAN, horometro INTEGER DEFAULT 0);', [],\n                (tx, res) => {\n                    console.log('tabla vehiculo creada')\n                },\n                (tx, error) => {\n                    setRetry(true)\n                    setLoading(false)\n                    setMensaje('Error al guardar los Vehiculos')\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS faena_vehiculo(id_faena_vehiculo INTEGER, id_vehiculo INTEGER, id_faena INTEGER, fecha_inicio DATE, fecha_termino DATE, motivo_termino VARCHAR(100), vigente BOOLEAN, id_trabajador INTEGER, observaciones VARCHAR(2000));', [],\n                (tx, res) => {\n                    console.log('tabla faena_vehiculo creada')\n                },\n                (tx, error) => {\n                    setRetry(true)\n                    setLoading(false)\n                    setMensaje('Error al guardar los datos Faena-Vehiculo')\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS tipo_trabajador(id_tipo_trabajador INTEGER, nombre_tipo_trabajador VARCHAR(100));', [],\n                (tx, res) => {\n                    console.log('tabla tipo_trabajador creada')\n                },\n                (tx, error) => {\n                    setRetry(true)\n                    setLoading(false)\n                    setMensaje('Error al guardar los Tipos de Trabajadores')\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS tipo_vehiculo(id_tipo_vehiculo INTEGER, nombre_tipo_vehiculo VARCHAR(100));', [],\n                (tx, res) => {\n                    console.log('tabla tipo_vehiculo creada')\n                },\n                (tx, error) => {\n                    setRetry(true)\n                    setLoading(false)\n                    setMensaje('Error al guardar los Tipos de Vehiculos')\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS proveedor(id_proveedor INTEGER, rut_proveedor INTEGER, dv_proveedor VARCHAR(100), nombre_proveedor VARCHAR(200), giro_proveedor VARCHAR(200), direccion_proveedor VARCHAR(200), id_comuna INTEGER, fono_proveedor VARCHAR(200), mail_proveedor VARCHAR(200));', [],\n                (tx, res) => {\n                    console.log('tabla proveedor creada')\n                },\n                (error) => {\n                    setRetry(true)\n                    setLoading(false)\n                    setMensaje('Error al guardar los Proveedores')\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS labor(id_labor INTEGER, nombre_labor VARCHAR(200));', [],\n                (tx, res) => {\n                    console.log('tabla labor creada')\n                },\n                (error) => {\n                    setRetry(true)\n                    setLoading(false)\n                    setMensaje('Error al guardar los Proveedores')\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS report(id_report INTEGER PRIMARY KEY AUTOINCREMENT, id_faena_vehiculo INTEGER, folio_report INTEGER, id_report_sistema INTEGER);', [],\n                (tx, res) => {\n                    console.log('tabla report creada')\n                },\n                (error) => {\n                    setRetry(true)\n                    setLoading(false)\n                    setMensaje('Error al guardar los report')\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS detalle_report(id_detalle_report INTEGER PRIMARY KEY AUTOINCREMENT, id_report INTEGER, id_report_apertura INTEGER, id_labor INTEGER, id_usuario INTEGER, fecha_hora_supervisor VARCHAR(200), fecha_hora VARCHAR(200), latitud VARCHAR(2000), longitud VARCHAR(2000), con_cierre BOOLEAN, id_motivo_detencion INTEGER, observaciones VARCHAR(2000), horometro VARCHAR(100));', [],\n                (tx, res) => {\n                    console.log('tabla detalle_report creada')\n                },\n                (error) => {\n                    setRetry(true)\n                    setLoading(false)\n                    setMensaje('Error al guardar los detalle_report')\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS funcionamiento_vehiculo(id_funcionamiento_vehiculo INTEGER PRIMARY KEY AUTOINCREMENT, id_faena_vehiculo INTEGER, id_report INTEGER, funcionando BOOLEAN, id_apertura INTEGER DEFAULT 0, cerrada BOOLEAN DEFAULT 0);', [],\n                (tx, res) => {\n                    console.log('tabla funcionamiento_vehiculo creada')\n                },\n                (error) => {\n                    setRetry(true)\n                    setLoading(false)\n                    setMensaje('Error al guardar los funcionamiento_vehiculo')\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'CREATE TABLE IF NOT EXISTS tipo_detencion(id_tipo_detencion INTEGER, nombre_tipo_detencion VARCHAR(100));', [],\n                (tx, res) => {\n                    console.log('tabla tipo_detencion creada')\n                },\n                (error) => {\n                    setRetry(true)\n                    setLoading(false)\n                    setMensaje('Error al guardar losd datos de tipo_detencion')\n                    console.error(error.message)\n                },\n            )\n        })\n\n    }\n\n    const selectComuna = (data) => {\n        bd.transaction(tx => {\n            tx.executeSql(\n                'select * from comuna', [],\n                (tx, res) => {\n                    const localComunas = res.rows\n\n                    for (let i = 0; i < data.length; i++) {\n                        if (localComunas.length == 0) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into comuna(id_comuna, nombre_comuna) values(?,?)',\n                                    [data[i].id_comuna, data[i].nombre_comuna],\n                                    (tr, res) => {\n                                        console.log('comuna insertada: ' + data[i].nombre_comuna)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else if (localComunas._array[i].id_comuna != data[i].id_comuna) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into comuna(nombre_comuna) values(?)',\n                                    [data[i].nombre_comuna],\n                                    (tr, res) => {\n                                        console.log('comuna insertada: ' + data[i].nombre_comuna)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else {\n                            null\n                        }\n                    }\n                },\n                (error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n    }\n\n    const selectUsuario = (data) => {\n        bd.transaction(tx => {\n            tx.executeSql(\n                'select * from usuario', [],\n                (tx, res) => {\n                    const localUsuario = res.rows\n\n                    for (let i = 0; i < data.length; i++) {\n                        if (localUsuario.length == 0) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into usuario(nombre_usuario, clave, id_trabajador) values(?, ?, ?)',\n                                    [data[i].nombre_usuario, data[i].clave, data[i].id_trabajador],\n                                    (tr, res) => {\n                                        console.log('usuario insertado: ' + data[i].nombre_usuario)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n\n                        else if (localUsuario._array[i].id_usuario != data[i].id_usuario) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into usuario(nombre_usuario, clave, id_trabajador) values(?, ?, ?)',\n                                    [data[i].nombre_usuario, data[i].clave, data[i].id_trabajador],\n                                    (tr, res) => {\n                                        console.log('usuario insertado: ' + data[i].nombre_usuario)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n\n                        else {\n                            null\n                        }\n                    }\n                },\n                (tx, e) => {\n                    console.log(e)\n                })\n        })\n    }\n\n    const selectFaena = (data) => {\n        bd.transaction(tx => {\n            tx.executeSql(\n                'select * from faena', [],\n                (tx, res) => {\n                    const localFaena = res.rows\n\n                    for (let i = 0; i < data.length; i++) {\n                        if (localFaena.length == 0) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into faena(id_faena, nombre_faena, id_trabajador, id_comuna, vigente) values(?,?,?,?,?)',\n                                    [data[i].id_faena, data[i].nombre_faena, data[i].id_trabajador, data[i].id_comuna, data[i].vigente],\n                                    (tr, res) => {\n                                        console.log('faena insertada: ' + data[i].nombre_faena)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n\n                        else if (localFaena._array[i].id_faena != data[i].id_faena) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into faena(nombre_faena, id_trabajador, id_comuna, vigente) values(?,?,?,?)',\n                                    [data[i].nombre_faena, data[i].id_trabajador, data[i].id_comuna, data[i].vigente],\n                                    (tr, res) => {\n                                        console.log('faena insertada: ' + data[i].nombre_faena)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n\n                        else {\n                            null\n                        }\n                    }\n                },\n                (tx, e) => {\n                    console.log(e)\n                })\n        })\n    }\n\n    const selectVehiculoFaena = (data) => {\n        bd.transaction(tx => {\n            tx.executeSql(\n                'select * from faena_vehiculo', [],\n                (tx, res) => {\n                    const localFaena = res.rows\n\n                    for (let i = 0; i < data.length; i++) {\n                        if (localFaena.length == 0) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into faena_vehiculo(id_faena_vehiculo, id_vehiculo, id_faena, fecha_inicio, fecha_termino, motivo_termino, vigente, id_trabajador, observaciones) values(?, ?, ?, ?, ?, ?, ?, ?, ?)',\n                                    [data[i].id_faena_vehiculo, data[i].id_vehiculo, data[i].id_faena, data[i].fecha_inicio, data[i].fecha_termino, data[i].motivo_termino, data[i].vigente, data[i].id_trabajador, data[i].observaciones],\n                                    (tr, res) => {\n                                        console.log('faena-vehiculo insertado: ' + data[i].fecha_inicio)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else if (localFaena._array[i].id_faena != data[i].id_faena) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into faena_vehiculo(id_faena_vehiculo, id_vehiculo, id_faena, fecha_inicio, fecha_termino, motivo_termino, vigente, id_trabajador, observaciones) values(?, ?, ?, ?, ?, ?, ?, ?, ?)',\n                                    [data[i].id_faena_vehiculo, data[i].id_vehiculo, data[i].id_faena, data[i].fecha_inicio, data[i].fecha_termino, data[i].motivo_termino, data[i].vigente, data[i].id_trabajador, data[i].observaciones],\n                                    (tr, res) => {\n                                        console.log('faena-vehiculo insertado: ' + data[i].fecha_inicio)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else {\n                            null\n                        }\n                    }\n                },\n                (error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n    }\n\n    const selectVehiculo = (data) => {\n        bd.transaction(tx => {\n            tx.executeSql(\n                'select * from vehiculo', [],\n                (tx, res) => {\n                    const localComunas = res.rows\n\n                    for (let i = 0; i < data.length; i++) {\n                        if (localComunas.length == 0) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into vehiculo(id_vehiculo, patente, id_tipo_vehiculo, id_estado_vehiculo, id_trabajador, id_proveedor, modelo, anio, vim, numero_motor, observaciones, marca, vigente) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',\n                                    [data[i].id_vehiculo, data[i].patente, data[i].id_tipo_vehiculo, data[i].id_estado_vehiculo, data[i].id_trabajador, data[i].id_proveedor, data[i].modelo, data[i].anio, data[i].vim, data[i].numero_motor, data[i].observaciones, data[i].marca, data[i].vigente],\n                                    (tr, res) => {\n                                        console.log('vehiculo insertado: ' + data[i].patente)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else if (localComunas._array[i].id_comuna != data[i].id_comuna) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into vehiculo(id_vehiculo, patente, id_tipo_vehiculo, id_estado_vehiculo, id_trabajador, id_proveedor, modelo, anio, vim, numero_motor, observaciones, marca, vigente) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',\n                                    [data[i].id_vehiculo, data[i].patente, data[i].id_tipo_vehiculo, data[i].id_estado_vehiculo, data[i].id_trabajador, data[i].id_proveedor, data[i].modelo, data[i].anio, data[i].vim, data[i].numero_motor, data[i].observaciones, data[i].marca, data[i].vigente],\n                                    (tr, res) => {\n                                        console.log('vehiculo insertado: ' + data[i].patente)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else {\n                            null\n                        }\n                    }\n                },\n                (error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n    }\n\n    const selectTrabajador = (data) => {\n        bd.transaction(tx => {\n            tx.executeSql(\n                'select * from trabajador', [],\n                (tx, res) => {\n                    const localTrabajador = res.rows\n\n                    for (let i = 0; i < data.length; i++) {\n                        if (localTrabajador.length == 0) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into trabajador(id_trabajador, id_tipo_trabajador, rut_trabajador, dv_trabajador, nombre_trabajador, direccion_trabajador, id_comuna, fono_trabajador, mail_trabajador) values(?, ?, ?, ?, ?, ?, ?, ?, ?)',\n                                    [data[i].id_trabajador, data[i].id_tipo_trabajador, data[i].rut_trabajador, data[i].dv_trabajador, data[i].nombre_trabajador, data[i].direccion_trabajador, data[i].id_comuna, data[i].fono_trabajador, data[i].mail_trabajador],\n                                    (tr, res) => {\n                                        console.log('trabajador insertado: ' + data[i].rut_trabajador)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else if (localTrabajador._array[i].id_comuna != data[i].id_comuna) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into vehiculo(id_vehiculo, patente, id_tipo_vehiculo, id_estado_vehiculo, id_trabajador, id_proveedor, modelo, anio, vim, numero_motor, observaciones, marca, vigente) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',\n                                    [data[i].id_vehiculo, data[i].patente, data[i].id_tipo_vehiculo, data[i].id_estado_vehiculo, data[i].id_trabajador, data[i].id_proveedor, data[i].modelo, data[i].anio, data[i].vim, data[i].numero_motor, data[i].observaciones, data[i].marca, data[i].vigente],\n                                    (tr, res) => {\n                                        console.log('vehiculo insertado: ' + data[i].patente)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else {\n                            null\n                        }\n                    }\n                },\n                (error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n    }\n\n    const selectTipoTrabajador = (data) => {\n        bd.transaction(tx => {\n            tx.executeSql(\n                'select * from tipo_trabajador', [],\n                (tx, res) => {\n                    const localTipoTrabajador = res.rows\n\n                    for (let i = 0; i < data.length; i++) {\n                        if (localTipoTrabajador.length == 0) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into tipo_trabajador(id_tipo_trabajador, nombre_tipo_trabajador ) values(?,?)',\n                                    [data[i].id_tipo_trabajador, data[i].nombre_tipo_trabajador],\n                                    (tr, res) => {\n                                        console.log('tipo trabajador insertado: ' + data[i].nombre_tipo_trabajador)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else if (localTipoTrabajador._array[i].id_comuna != data[i].id_comuna) {\n                            bd.transaction(tr => {\n                                bd.transaction(tr => {\n                                    tr.executeSql(\n                                        'insert into tipo_trabajador(id_tipo_trabajador, nombre_tipo_trabajador ) values(?,?)',\n                                        [data[i].id_tipo_trabajador, data[i].nombre_tipo_trabajador],\n                                        (tr, res) => {\n                                            console.log('tipo trabajador insertado: ' + data[i].nombre_tipo_trabajador)\n                                        },\n                                        (tr, e) => {\n                                            console.error(e)\n                                        }\n                                    )\n                                })\n                            })\n                        }\n                        else {\n                            null\n                        }\n                    }\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n    }\n\n    const selectTipoVehiculo = (data) => {\n        bd.transaction(tx => {\n            tx.executeSql(\n                'select * from tipo_vehiculo', [],\n                (tx, res) => {\n                    const localTipoVehiculo = res.rows\n\n                    for (let i = 0; i < data.length; i++) {\n                        if (localTipoVehiculo.length == 0) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into tipo_vehiculo(id_tipo_vehiculo, nombre_tipo_vehiculo ) values(?,?)',\n                                    [data[i].id_tipo_vehiculo, data[i].nombre_tipo_vehiculo],\n                                    (tr, res) => {\n                                        console.log('tipo vehiculo insertado: ' + data[i].nombre_tipo_trabajador)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else if (localTipoVehiculo._array[i].id_comuna != data[i].id_comuna) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into tipo_trabajador(id_tipo_trabajador, nombre_tipo_trabajador ) values(?,?)',\n                                    [data[i].id_tipo_trabajador, data[i].nombre_tipo_trabajador],\n                                    (tr, res) => {\n                                        console.log('tipo trabajador insertado: ' + data[i].nombre_tipo_trabajador)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else {\n                            null\n                        }\n                    }\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n    }\n\n    const selectProveedor = (data) => {\n        bd.transaction(tx => {\n            tx.executeSql(\n                'select * from proveedor', [],\n                (tx, res) => {\n                    const localProveedor = res.rows\n\n                    for (let i = 0; i < data.length; i++) {\n                        if (localProveedor.length == 0) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into proveedor(id_proveedor, rut_proveedor, dv_proveedor, nombre_proveedor, giro_proveedor, direccion_proveedor, id_comuna, fono_proveedor, mail_proveedor) values(?, ?, ?, ?, ?, ?, ?, ?, ?)',\n                                    [data[i].id_proveedor, data[i].rut_proveedor, data[i].dv_proveedor, data[i].nombre_proveedor, data[i].giro_proveedor, data[i].direccion_proveedor, data[i].id_comuna, data[i].fono_proveedor, data[i].mail_proveedor],\n                                    (tr, res) => {\n                                        console.log('proveedor insertado: ' + data[i].nombre_proveedor)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else if (localProveedor._array[i].id_proveedor != data[i].id_proveedor) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into proveedor(id_proveedor, rut_proveedor, dv_proveedor, nombre_proveedor, giro_proveedor, direccion_proveedor, id_comuna, fono_proveedor, mail_proveedor) values(?, ?, ?, ?, ?, ?, ?, ?, ?)',\n                                    [data[i].id_proveedor, data[i].rut_proveedor, data[i].dv_proveedor, data[i].nombre_proveedor, data[i].giro_proveedor, data[i].direccion_proveedor, data[i].id_comuna, data[i].fono_proveedor, data[i].mail_proveedor],\n                                    (tr, res) => {\n                                        console.log('proveedor insertado: ' + data[i].nombre_proveedor)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else {\n                            null\n                        }\n                    }\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n    }\n\n    const selectLabor = (data) => {\n        bd.transaction(tx => {\n            tx.executeSql(\n                'select * from labor', [],\n                (tx, res) => {\n                    const localLabor = res.rows\n\n                    for (let i = 0; i < data.length; i++) {\n                        if (localLabor.length == 0) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into labor(id_labor, nombre_labor) values(?,?)',\n                                    [data[i].id_labor, data[i].nombre_labor],\n                                    (tr, res) => {\n                                        console.log('labor insertada: ' + data[i].nombre_labor)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else if (localLabor._array[i].id_proveedor != data[i].id_proveedor) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into labor(id_labor, nombre_labor) values(?,?)',\n                                    [data[i].id_labor, data[i].nombre_labor],\n                                    (tr, res) => {\n                                        console.log('labor insertada: ' + data[i].nombre_labor)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else {\n                            null\n                        }\n                    }\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n    }\n\n    const selectTipoDetencion = (data) => {\n        bd.transaction(tx => {\n            tx.executeSql(\n                'select * from tipo_detencion', [],\n                (tx, res) => {\n                    const localDetencion = res.rows\n\n                    for (let i = 0; i < data.length; i++) {\n                        if (localDetencion.length == 0) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into tipo_detencion(id_tipo_detencion, nombre_tipo_detencion) values(?,?)',\n                                    [data[i].id_tipo_detencion, data[i].nombre_tipo_detencion],\n                                    (tr, res) => {\n                                        console.log('tipo detencion insertada: ' + data[i].nombre_tipo_detencion)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else if (localDetencion._array[i].id_tipo_detencion != data[i].id_tipo_detencion) {\n                            bd.transaction(tr => {\n                                tr.executeSql(\n                                    'insert into tipo_detencion(id_tipo_detencion, nombre_tipo_detencion) values(?,?)',\n                                    [data[i].id_tipo_detencion, data[i].nombre_tipo_detencion],\n                                    (tr, res) => {\n                                        console.log('tipo detencion insertada: ' + data[i].nombre_tipo_detencion)\n                                    },\n                                    (tr, e) => {\n                                        console.error(e)\n                                    }\n                                )\n                            })\n                        }\n                        else {\n                            null\n                        }\n                    }\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n    }\n\n    const getUsuario = async () => {\n        setMensaje('')\n        setRetry(false)\n        setLoading(true)\n\n        try {\n            const response = await fetch(ruta + 'sync/usuario', { method: 'POST' })\n            const data = await response.json()\n            if (await data.length != 0) {\n                selectUsuario(data)\n            }\n            getFaenas()\n        }\n        catch (e) {\n            setLoading(false)\n            setRetry(true)\n            setMensaje('Error al Conectar con el Servidor')\n            console.error(e)\n        }\n    }\n\n    const getFaenas = async () => {\n        try {\n            const response = await fetch(ruta + 'sync/faena', { method: 'POST' })\n            const data = await response.json()\n            if (await data.length != 0) {\n                selectFaena(data)\n            }\n            getComunas()\n        }\n        catch (e) {\n            setLoading(false)\n            setRetry(true)\n            setMensaje('Error al Conectar con el Servidor')\n            console.error(e)\n        }\n    }\n\n    const getComunas = async () => {\n        try {\n            const response = await fetch(ruta + 'sync/comuna', { method: 'POST' })\n            const data = await response.json()\n            if (await data.length != 0) {\n                selectComuna(data)\n            }\n            getVehiculo()\n        }\n        catch (e) {\n            setLoading(false)\n            setRetry(true)\n            setMensaje('Error al Conectar con el Servidor')\n            console.error(e)\n        }\n    }\n\n    const getVehiculo = async () => {\n        try {\n            const response = await fetch(ruta + 'sync/vehiculo', { method: 'POST' })\n            const data = await response.json()\n            if (await data.length != 0) {\n                selectVehiculo(data)\n            }\n            getVehiculoFaena()\n        }\n        catch (e) {\n            setLoading(false)\n            setRetry(true)\n            setMensaje('Error al Conectar con el Servidor')\n            console.error('get Vehiculos: ' + e)\n        }\n    }\n\n    const getVehiculoFaena = async () => {\n        try {\n            const response = await fetch(ruta + 'sync/vehiculo-faena', { method: 'POST' })\n            const data = await response.json()\n            if (await data.length != 0) {\n                selectVehiculoFaena(data)\n            }\n            getTrabajador()\n        }\n        catch (e) {\n            setLoading(false)\n            setRetry(true)\n            setMensaje('Error al Conectar con el Servidor')\n            console.error('get vehiculos faena :' + e)\n        }\n    }\n\n    const getTrabajador = async () => {\n        try {\n            const response = await fetch(ruta + 'sync/trabajador', { method: 'POST' })\n            const data = await response.json()\n            if (await data.length != 0) {\n                selectTrabajador(data)\n            }\n            getTipoTrabajador()\n        }\n        catch (e) {\n            setLoading(false)\n            setRetry(true)\n            setMensaje('Error al Conectar con el Servidor')\n            console.error('get trabajador :' + e)\n        }\n    }\n\n    const getTipoTrabajador = async () => {\n        try {\n            const response = await fetch(ruta + 'sync/tipo-trabajador', { method: 'POST' })\n            const data = await response.json()\n            if (await data.length != 0) {\n                selectTipoTrabajador(data)\n            }\n            getTipoVehiculo()\n        }\n        catch (e) {\n            setLoading(false)\n            setRetry(true)\n            setMensaje('Error al Conectar con el Servidor')\n            console.error('get tipo trabajador :' + e)\n        }\n    }\n\n    const getTipoVehiculo = async () => {\n        try {\n            const response = await fetch(ruta + 'sync/tipo-vehiculo', { method: 'POST' })\n            const data = await response.json()\n            if (await data.length != 0) {\n                selectTipoVehiculo(data)\n            }\n            getProveedor()\n        }\n        catch (e) {\n            setLoading(false)\n            setRetry(true)\n            setMensaje('Error al Conectar con el Servidor')\n            console.error('get tipo trabajador :' + e)\n        }\n    }\n\n    const getProveedor = async () => {\n        try {\n            const response = await fetch(ruta + 'sync/proveedor', { method: 'POST' })\n            const data = await response.json()\n            if (await data.length != 0) {\n                selectProveedor(data)\n            }\n            getLabor()\n        }\n        catch (e) {\n            setLoading(false)\n            setRetry(true)\n            setMensaje('Error al Conectar con el Servidor')\n            console.error('get proveedor :' + e)\n        }\n    }\n\n    const getLabor = async () => {\n        try {\n            const response = await fetch(ruta + 'sync/labor', { method: 'POST' })\n            const data = await response.json()\n            if (await data.length != 0) {\n                selectLabor(data)\n            }\n            setTimeout(() => {\n                setLoading(false)\n                navigation.navigate('Faenas')\n            }, 3000)\n        }\n        catch (e) {\n            setLoading(false)\n            setRetry(true)\n            setMensaje('Error al Conectar con el Servidor')\n            console.error('get labor :' + e)\n        }\n    }\n\n    const deleteTablas = () => {\n        bd.transaction(tx => {\n            tx.executeSql(\n                'drop table comuna;', [],\n                (tx, res) => {\n                    console.log('reiniciando tabla comuna')\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'drop table usuario;', [],\n                (tx, res) => {\n                    console.log('reiniciando tabla usuario')\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'drop table faena;', [],\n                (tx, res) => {\n                    console.log('reiniciando tabla faena')\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'drop table trabajador;', [],\n                (tx, res) => {\n                    console.log('reiniciando tabla trabajador')\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'drop table tipo_trabajador;', [],\n                (tx, res) => {\n                    console.log('reiniciando tabla tipo_trabajador')\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'drop table vehiculo;', [],\n                (tx, res) => {\n                    console.log('reiniciando tabla vehiculo')\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'drop table faena_vehiculo;', [],\n                (tx, res) => {\n                    console.log('reiniciando tabla faena_vehiculo')\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'drop table tipo_vehiculo;', [],\n                (tx, res) => {\n                    console.log('reiniciando tabla tipo_vehiculo')\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'drop table proveedor;', [],\n                (tx, res) => {\n                    console.log('reiniciando tabla proveedor')\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'drop table detalle_report;', [],\n                (tx, res) => {\n                    console.log('reiniciando tabla detalle report')\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'drop table report;', [],\n                (tx, res) => {\n                    console.log('reiniciando tabla report')\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'drop table funcionamiento_vehiculo;', [],\n                (tx, res) => {\n                    console.log('reiniciando estado')\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n\n        bd.transaction(tx => {\n            tx.executeSql(\n                'drop table labor;', [],\n                (tx, res) => {\n                    console.log('reiniciando labor')\n                },\n                (tx, error) => {\n                    console.error(error.message)\n                },\n            )\n        })\n    }\n\n    const cerrarSesion = async () => {\n        await AsyncStorage.removeItem('user')\n        await AsyncStorage.removeItem('isLoged')\n        navigation.replace('Login')\n    }\n\n    const sincronizar = () => {\n        setLoading(true)\n        deleteTablas()\n        createTables()\n        getUsuario()\n    }\n\n    return (\n        <View style={styles.container}>\n            <StatusBar barStyle='dark-content' translucent backgroundColor=\"transparent\" />\n\n            <View style={{ flex: 1, }} />\n\n            <Animatable.View animation={'fadeInUpBig'} style={{ alignItems: 'center', justifyContent: 'center', flex: 8 }}>\n                <Text style={{ fontSize: 28, fontWeight: 'bold' }}>miSupervisor</Text>\n\n                {loading ? (\n                    <Animatable.View animation=\"tada\" easing=\"ease-out\" iterationCount=\"infinite\">\n                        <MaterialCommunityIcons name='dump-truck' size={40} color='#000' />\n                    </Animatable.View>\n                ) : (\n                    retry ? (\n                        <View>\n                            <Text style={{ color: 'gray', fontWeight: 'bold', fontSize: 15, marginBottom: 10, marginTop: 5 }}>{mensaje}</Text>\n                        </View>\n                    ) : (\n                        <Animatable.View animation=\"pulse\" easing=\"ease-out\" iterationCount=\"infinite\" style={{ margin: 20, }}>\n                            <TouchableOpacity\n                                style={{ flexDirection: 'row', backgroundColor: '#000', alignItems: 'center', justifyContent: 'center', width: 200, height: 50, borderRadius: 10, }}\n                                onPress={() => sincronizar()}>\n\n                                <MaterialIcons name=\"cloud-download\" color='#fff' size={20} />\n                                <Text style={{ color: '#fff', fontWeight: 'bold', fontSize: 18, marginLeft: 10 }}>Sincronizar</Text>\n\n                            </TouchableOpacity>\n                        </Animatable.View>\n                    )\n                )}\n\n            </Animatable.View>\n\n            <View style={{ flex: 1 }}>\n                {retry ? (\n                    <TouchableOpacity onPress={() => getUsuario()} style={{ backgroundColor: '#000', width: 100, height: 30, borderRadius: 10, alignItems: 'center', justifyContent: 'center' }}>\n                        <Text style={{ color: '#fff', fontWeight: 'bold', fontSize: 15 }}>Reintentar</Text>\n                    </TouchableOpacity>\n                ) : (\n                    loading ? (\n                        <View>\n                            <ActivityIndicator size=\"small\" color=\"#000\" />\n                            <Text style={{ color: 'gray', fontWeight: 'bold', fontSize: 15, marginBottom: 10, marginTop: 5 }}>Importando Datos...</Text>\n                        </View>\n                    ) : (\n                        <TouchableOpacity onPress={() => cerrarSesion()}>\n                            <Text style={{ color: 'gray', fontWeight: 'bold', fontSize: 15, marginBottom: 10, marginTop: 5 }}>Cerrar Sesión</Text>\n                        </TouchableOpacity>\n                    )\n                )}\n            </View>\n\n        </View>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}